clear all
%===================
% Input date and choose condition
%==================
D = '30-Dec-2022';
condition='sunny';
% 'cloudy' or 'sunny'
[DayNumber,DayName] = weekday(D);

if DayNumber==0||1
 weekend = 1;
 weekday = 0;
 disp('Your day is a weekend') 
else
 weekend = 0;
 weekday = 1;
  disp('Your day is a weekday') 
end

% Convert '1-Jan-2021' to a MATLAB serial date number
d1 = datenum('1-Jan-2022');

% Convert D to a MATLAB serial date number
d2 = datenum(D);

% Calculate the difference in days
NumDays= abs(d2 - d1);



if (NumDays >= 1 && NumDays <= 59) || (NumDays>= 244 && NumDays<= 365)
    season = 'winter';
    disp('You chose a winter day!') 
elseif NumDays >= 60 && NumDays <= 243
    season = 'summer';
    disp('You chose a summer day!') 
else
    season = '';
    error('Invalid date. Please choose another day.');
end 


load WEATHER_FACTOR.mat
%=============================
% simulation parameters
%=============================

h_start = -12; % start of day
h_end = 12; % end of day
Tnom = 25; % nominal operating temperature
%=============================
% Solar panel parameters
%=============================
pollution = 0.94; % pollution factor
inverter_efficiency = 0.97; % inverter efficiency
I_o = 1365; % solar constant
theta_lat = 51; % latitude
theta_tilt = 23.44; % tilt angle
panel_number = 16; % number of panels
panel_area = 1.6; % panel area
panel_tilt = 30; % panel tilt angle
panel_azimuth = 180; % panel azimuth angle
panel_efficiency = 0.1527; % panel efficiency
house_idle = 0.04; % house idle power consumption
panel_capacity = panel_area * panel_efficiency * panel_number;

% Initialize variables
iterator = 1;
hour = zeros(1, 49);
omega_h = zeros(1, 49);
theta_z = zeros(1, 49);
altitude_angle = zeros(1, 49);
azimuth = zeros(1, 49);
 AM = 1.5;

iterator = 1;
for h = -12:0.5:+11.5
     % angles
     hour(iterator) = h + 12;
     omega_h(iterator) = 15*h; 
     delta = theta_tilt * sind((360/365)*(NumDays+284)); 
     theta_z(iterator) = (acosd(sind(theta_lat)*sind(delta) + cosd(theta_lat)*cosd(delta)*cosd(omega_h(iterator)))); 
   
    % Azimuth information
    cos_zenith = cosd(90 - altitude_angle(iterator));
    sin_zenith = sind(90 - altitude_angle(iterator));
    sin_azimuth = cosd(theta_lat)*sind(omega_h(iterator))/cos_zenith;
    cos_azimuth = (sind(theta_lat)*cos_zenith - cosd(theta_lat)*sind(delta))/cosd(delta);
    if sin_azimuth > 0
    azimuth(iterator) = acosd(cos_azimuth);
    else
    azimuth(iterator) = -acosd(cos_azimuth);
    end

    % Season  information
    if strcmp(condition, 'sunny')
        if ismember(hour(iterator), [6:0.5:8, 15:0.5:17]) % summer months
            weather_factor = interp1(linspace(1, 24, 24), weather_factor_summer, linspace(1, 24, 48));
        else % winter months
            weather_factor = interp1(linspace(1, 24, 24), weather_factor_winter, linspace(1, 24, 48));
        end
    elseif strcmp(condition, 'cloudy')
        if ismember(hour(iterator), [6:0.5:8, 15:0.5:17]) % summer months
            weather_factor = interp1(linspace(1, 24, 24), weather_factor_summer_cloudy, linspace(1, 24, 48));
        else % winter months
            weather_factor = weather_factor_winter_cloudy;
        end
        weather_factor = kron(weather_factor, ones(2, 1)); % repeating the weather factor for two days
    end



    
    % irradiance/irradiation 
     cosine_zenith=(cosd(theta_lat)*cosd(delta)*cosd(omega_h(iterator)) + sind(theta_lat)*sind(delta));
    if (cosine_zenith) <= 0
        G(iterator) = 0;
    else 
        G(iterator) = 1365 * (cosine_zenith) * weather_factor(iterator);
    end 


     %power calculations
     if G(iterator) <= 0 
     total_energy_generated(iterator) = 0;
     total_energy_generated_kWh(iterator) = 0;
     total_solar_input_power(iterator) = 0;
     total_solar_output_power(iterator) = 0;
     else
     total_solar_input_power(iterator) = G(iterator) * panel_number * panel_area* pollution * 1;
     total_solar_output_power(iterator) = total_solar_input_power(iterator) *panel_efficiency;
     total_energy_generated(iterator) = total_solar_output_power(iterator) *inverter_efficiency; % Wh
     total_energy_generated_kWh(iterator) = total_energy_generated(iterator) / 1000 ;

 end
 iterator = iterator + 1;
end

hour=linspace(1,24,48);

figure 
plot(hour, total_energy_generated_kWh)
xlim([0 24])
grid on
grid minor
title('Total energy generated [kWh]')
xlabel('Time of the day in 24h format')
ylabel('Total energy generated by panels [kW]')
